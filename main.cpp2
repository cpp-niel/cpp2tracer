rt: namespace = {
    // Constants
    infinity: double = std::numeric_limits<double>::infinity();
    pi: double = std::numbers::pi;
    aspect_ratio : double = 16.0 / 9.0;
    samples_per_pixel : int = 100;

    // Utility Functions
    degrees_to_radians: (degrees: double) -> double = {
        return degrees * pi / 180.0;
    }

    random_double: () -> double = {
        return std::rand() / (RAND_MAX + 1.0);
    }

    random_double: (min: double, max: double) -> double = {
        return min + (max - min) * random_double();
    }

    ///////////////////////////////////////// vec3 /////////////////////////////////////
    vec3: type = {
        public e: std::array<double, 3> = (0.0, 0.0, 0.0);

        operator=: (out this) = {}

        operator=: (out this, x_: double, y_: double, z_: double) = {
            e[0] = x_;
            e[1] = y_;
            e[2] = z_;
        }

        x: (this) -> double = { return e[0]; }
        y: (this) -> double = { return e[1]; }
        z: (this) -> double = { return e[2]; }

        operator-: (this) -> vec3 = { return vec3(-e[0], -e[1], -e[2]); }
        at: (this, i: int) -> double = { return e[i]; }
        set_at: (inout this, i: int, val: double) = { e[i] = val; }

        operator+=: (inout this, v: vec3) = {
            e[0] += v.at(0);
            e[1] += v.at(1);
            e[2] += v.at(2);
        }

        operator*=: (inout this, t: double) = {
            e[0] *= t;
            e[1] *= t;
            e[2] *= t;
        }

        operator/=: (inout this, t: double) = {
            this *= 1 / t;
        }

        length: (this) -> double = {
            return std::sqrt(length_squared());
        }

        length_squared: (this) -> double = {
            return e[0] * e[0] + e[1] * e[1] + e[2] * e[2];
        }

        random: () -> vec3 = {
            return vec3(random_double(), random_double(), random_double());
        }

        random: (min: double, max: double) -> vec3 = {
            return vec3(random_double(min, max), random_double(min, max), random_double(min, max));
        }

        near_zero: (this) -> bool = {
            // Return true if the vector is close to zero in all dimensions.
            s := 1e-8;
            return (std::fabs(e[0]) < s) && (std::fabs(e[1]) < s) && (std::fabs(e[2]) < s);
        }
    }

    point3: type == vec3;
    color: type == vec3;

    operator<<: (inout os: std::ostream, v: vec3) -> forward std::ostream = {
        return os << v.e[0] << ' ' << v.e[1] << ' ' << v.e[2];
    }

    operator+: (u: vec3, v: vec3) -> vec3 = {
        return vec3(u.e[0] + v.e[0], u.e[1] + v.e[1], u.e[2] + v.e[2]);
    }

    operator-: (u: vec3, v: vec3) -> vec3 = {
        return vec3(u.e[0] - v.e[0], u.e[1] - v.e[1], u.e[2] - v.e[2]);
    }

    operator*: (u: vec3, v: vec3) -> vec3 = {
        return vec3(u.e[0] * v.e[0], u.e[1] * v.e[1], u.e[2] * v.e[2]);
    }

    operator*: (t: double, v: vec3) -> vec3 = {
        return vec3(t * v.e[0], t * v.e[1], t * v.e[2]);
    }

    operator*: (v: vec3, t: double) -> vec3 = {
        return t * v;
    }

    operator/: (v: vec3, t: double) -> vec3 = {
        return (1.0 / t) * v;
    }

    dot: (u: vec3, v: vec3) -> double = {
        return u.e[0] * v.e[0] + u.e[1] * v.e[1] + u.e[2] * v.e[2];
    }

    cross: (u: vec3, v: vec3) -> vec3 = {
        return vec3(u.e[1] * v.e[2] - u.e[2] * v.e[1],
                    u.e[2] * v.e[0] - u.e[0] * v.e[2],
                    u.e[0] * v.e[1] - u.e[1] * v.e[0]);
    }

    reflect: (v: vec3, n: vec3) -> vec3 = {
        return v - 2.0 * dot(v, n) * n;
    }

    refract: (uv: vec3, n: vec3, etai_over_etat: double) -> vec3 = {
        cos_theta := std::fmin(dot(-uv, n), 1.0);
        r_out_perp :=  etai_over_etat * (uv + cos_theta * n);
        r_out_parallel := -std::sqrt(std::fabs(1.0 - r_out_perp.length_squared())) * n;
        return r_out_perp + r_out_parallel;
    }

    unit_vector: (v: vec3) -> vec3 = {
        return v / v.length();
    }

    random_in_unit_sphere: () -> vec3 = {
        while true {
            p := vec3::random(-1.0, 1.0);
            if p.length_squared() >= 1.0 { continue; }
            return p;
        }
    }

    random_unit_vector: () -> vec3 = {
        return unit_vector(random_in_unit_sphere());
    }

    write_color: (inout os: std::ostream, pixel_color: color) = {
        r := pixel_color.x();
        g := pixel_color.y();
        b := pixel_color.z();

        // Divide the color by the number of samples.
        scale := 1.0 / samples_per_pixel;
        r = std::sqrt(scale * r);
        g = std::sqrt(scale * g);
        b = std::sqrt(scale * b);

        // Write the translated [0,255] value of each color component.
        os << static_cast<int>(256 * std::clamp(r, 0.0, 0.999)) << ' '
           << static_cast<int>(256 * std::clamp(g, 0.0, 0.999)) << ' '
           << static_cast<int>(256 * std::clamp(b, 0.0, 0.999)) << '\n';
    }

    ///////////////////////////////////////// ray /////////////////////////////////////
    ray: type = {
        orig: point3;
        dir: vec3;

        operator=: (out this) = {
            orig = point3(0, 0, 0);
            dir = vec3(0, 0, 0);
        }

        operator=:(out this, the_origin: point3, the_direction: vec3) = {
            orig = the_origin;
            dir = the_direction;
        }

        origin: (this) -> point3 = { return orig; }
        direction: (this) -> vec3 = { return dir; }

        at: (this, t: double) -> point3 = {
            return orig + t * dir;
        }
    }

    /////////////////////////////////////// camera ///////////////////////////////////////
    camera: type = {
        origin: point3;
        horizontal: vec3;
        vertical: vec3;
        lower_left_corner: point3;

        operator=: (out this) = {
            origin = point3(0, 0, 0);
            horizontal = vec3(aspect_ratio * 2.0, 0, 0);
            vertical = vec3(0, 2.0, 0);
            lower_left_corner = origin - horizontal / 2.0 - vertical / 2.0 - vec3(0, 0, 1.0);
        }

        get_ray: (this, u: double, v: double) -> ray = {
            return ray(origin, lower_left_corner + u * horizontal + v * vertical - origin);
        }
    }

    ///////////////////////////////////// material ///////////////////////////////////////
    lambertian: type = {
        albedo: color;

        operator=: (out this) = { albedo = color(0, 0, 0); }
        operator=: (out this, a: color) = { albedo = a; }

        scatter: (this, r_in: ray, rec: hit_record, inout attenuation: color, inout scattered: ray) -> bool = {
            scatter_direction := rec.normal + random_unit_vector();
            // Catch degenerate scatter direction
            if scatter_direction.near_zero() { scatter_direction = rec.normal; }
            attenuation = albedo;
            scattered = ray(rec.p, scatter_direction);
            return true;
        }
    }

    metal: type = {
        albedo: color;
        fuzz: double;

        operator=: (out this) = { albedo = color(0, 0, 0); fuzz = 0.0; }
        operator=: (out this, a: color, f: double) = { albedo = a; fuzz = std::min(f, 1.0); }

        scatter: (this, r_in: ray, rec: hit_record, inout attenuation: color, inout scattered: ray) -> bool = {
            reflected := reflect(unit_vector(r_in.direction()), rec.normal);
            scattered = ray(rec.p, reflected + fuzz * random_in_unit_sphere());
            attenuation = albedo;
            return (dot(scattered.direction(), rec.normal) > 0);
        }
    }

    dielectric: type = {
        ir: double; // Index of Refraction

        operator=: (out this) = { ir = 0.0; }
        operator=: (out this, index_of_refraction: double) = { ir = index_of_refraction; }

        scatter: (this, r_in: ray, rec: hit_record, inout attenuation: color, inout scattered: ray) -> bool = {
            attenuation = color(1.0, 1.0, 1.0);
            refraction_ratio := ir;
            if rec.front_face { refraction_ratio = 1.0 / refraction_ratio; }

            unit_direction := unit_vector(r_in.direction());
            cos_theta := std::fmin(dot(-unit_direction, rec.normal), 1.0);
            sin_theta := std::sqrt(1.0 - cos_theta * cos_theta);

            cannot_refract := (refraction_ratio * sin_theta) > 1.0;
            direction := vec3();

            if cannot_refract || (reflectance(cos_theta, refraction_ratio) > random_double()) {
                direction = reflect(unit_direction, rec.normal);
            }
            else {
                direction = refract(unit_direction, rec.normal, refraction_ratio);
            }

            scattered = ray(rec.p, direction);
            return true;
        }

        reflectance: (cosine: double, ref_idx: double) -> double = {
            // Use Schlick's approximation for reflectance.
            r0 := (1.0 - ref_idx) / (1.0 + ref_idx);
            r0 = r0 * r0;
            return r0 + (1.0 - r0) * std::pow(1.0 - cosine, 5.0);
        }
    }

    material: type == std::variant<lambertian, metal, dielectric>;

    ///////////////////////////////////// hittable ///////////////////////////////////////
    hit_record: type = {
        public p: point3;
        public normal: vec3;
        public mat: material;
        public t: double;
        public front_face: bool;

        set_face_normal: (inout this, r: ray, outward_normal: vec3) = {
            front_face = dot(r.direction(), outward_normal) < 0;
            if front_face { normal = outward_normal; } else { normal = -outward_normal; }
        }
    }

    sphere: type = {
        center: point3;
        radius: double;
        mat: material;

        operator=:(out this, p: point3, r: double, m: material) = {
            center = p;
            radius = r;
            mat = m;
        }

        hit: (this, r: ray, t_min: double, t_max: double, inout rec: hit_record) -> bool = {
            oc := r.origin() - center;
            a := r.direction().length_squared();
            half_b := dot(oc, r.direction());
            c := oc.length_squared() - radius * radius;

            discriminant := half_b * half_b - a * c;
            if discriminant < 0 { return false; }

            sqrtd := sqrt(discriminant);

            // Find the nearest root that lies in the acceptable range.
            root := (-half_b - sqrtd) / a;
            if (root < t_min) || (t_max < root) {
                root = (-half_b + sqrtd) / a;
                if (root < t_min) || (t_max < root) { return false; }
            }

            rec.t = root;
            rec.p = r.at(rec.t);
            outward_normal := (rec.p - center) / radius;
            rec.set_face_normal(r, outward_normal);
            rec.mat = mat;

            return true;
        }
    }

    hit: (r: ray, objects: std::vector<sphere>, t_min: double, t_max: double, inout rec: hit_record) -> bool = {
        temp_rec := hit_record();
        hit_anything := false;
        closest_so_far := t_max;

        for objects do: (object) = {
            if object.hit(r, t_min, closest_so_far, temp_rec) {
                hit_anything = true;
                closest_so_far = temp_rec.t;
                rec = temp_rec;
            }
        }

        return hit_anything;
    }

    /////////////////////////////////// ray tracing //////////////////////////////////////
    ray_color: (r: ray, world: std::vector<sphere>, depth: int) -> color = {
        if depth <= 0 { return color(0, 0, 0); }

        rec := hit_record();
        if hit(r, world, 0.001, infinity, rec) {
            scattered := ray();
            attenuation := color();
            is_scattered := false;

            // TODO this is a workaround because function expressions don't yet support powerful enough captures
            // to use std::visit and I can't get inspect to work either
            if std::holds_alternative<lambertian>(rec.mat) {
                is_scattered = std::get<lambertian>(rec.mat).scatter(r, rec, attenuation, scattered);
            }
            if std::holds_alternative<metal>(rec.mat) {
                is_scattered = std::get<metal>(rec.mat).scatter(r, rec, attenuation, scattered);
            }
            if std::holds_alternative<dielectric>(rec.mat) {
                is_scattered = std::get<dielectric>(rec.mat).scatter(r, rec, attenuation, scattered);
            }

            if is_scattered { return attenuation * ray_color(scattered, world, depth-1); }

            return color(0,0,0);
        }

        unit_direction := unit_vector(r.direction());
        t := 0.5 * (unit_direction.y() + 1.0);
        return (1.0 - t) * color(1.0, 1.0, 1.0) + t * color(0.5, 0.7, 1.0);
    }
}

main: () -> int = {
    // Image
    image_width := 400;
    image_height := static_cast<int>(image_width / rt::aspect_ratio);
    max_depth := 50;

    // World
    material_ground := rt::material(rt::lambertian(rt::color(0.8, 0.8, 0.0)));
    material_center := rt::material(rt::lambertian(rt::color(0.1, 0.2, 0.5)));
    material_left   := rt::material(rt::dielectric(1.5));
    material_right  := rt::material(rt::metal(rt::color(0.8, 0.6, 0.2), 0.0));

    world := std::vector<rt::sphere>();
    world.emplace_back(rt::point3( 0.0, -100.5, -1.0), 100.0, material_ground);
    world.emplace_back(rt::point3( 0.0,    0.0, -1.0),   0.5, material_center);
    world.emplace_back(rt::point3(-1.0,    0.0, -1.0),   0.5, material_left);
    world.emplace_back(rt::point3(-1.0,    0.0, -1.0),  -0.4, material_left);
    world.emplace_back(rt::point3( 1.0,    0.0, -1.0),   0.5, material_right);

    // Camera
    cam := rt::camera();

    // Render
    std::cout << "P3\n" << image_width << ' ' << image_height << "\n255\n";

    j := image_height - 1; while j >= 0 next j-- {
        std::cerr << "\rScanlines remaining: " << j << ' ' << std::flush;
        i := 0; while i < image_width next i++ {
            pixel_color := rt::color(0, 0, 0);
            s := 0; while s < rt::samples_per_pixel next s++ {
                u := (i + rt::random_double()) / (image_width-1);
                v := (j + rt::random_double()) / (image_height-1);
                r := cam.get_ray(u, v);
                pixel_color += ray_color(r, world, max_depth);
            }

            write_color(std::cout, pixel_color);
        }
    }

    std::cerr << "\nDone.\n";
}